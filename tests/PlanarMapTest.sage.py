

# This file was *autogenerated* from the file PlanarMapTest.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_4 = Integer(4); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5)
from sage.all_cmdline import *   # import sage library


load("../PlanarMap.sage")


#Testing the init function of the PlanarMap class
def test_init_planar_map():

    #Test case 1
    #The case where sigma and alpha doesn't have the same size    
    sigma_1 = Permutation( [_sage_const_3 ,_sage_const_4 ,_sage_const_1 ,_sage_const_2 ,_sage_const_6 ,_sage_const_5 ])
    alpha_1 = Permutation( [(_sage_const_1 ,_sage_const_2 ),(_sage_const_3 ,_sage_const_4 )])
   
    same_size_fail = False

    try: 
        map_1 = PlanarMap(sigma_1,alpha_1)
    except ValueError as e:
        if str(e) == "The two permutations does not have the same size" :
            same_size_fail = True
    assert same_size_fail is True

    #Test case 2
    #The case where alpha isn't an involution
    sigma_1 = Permutation( [_sage_const_3 ,_sage_const_4 ,_sage_const_1 ,_sage_const_2 ,_sage_const_6 ,_sage_const_5 ])
    alpha_1 = Permutation( [(_sage_const_1 ,_sage_const_2 ),(_sage_const_3 ,_sage_const_4 )])
   
    same_size_fail = False

    try: 
        map_1 = PlanarMap(sigma_1,alpha_1)
    except ValueError as e:
        if str(e) == "The two permutations does not have the same size" :
            same_size_fail = True
    assert same_size_fail is True

    #Test case 3
    #The case where alpha isn't an involution
    sigma_2 = Permutation( [_sage_const_3 ,_sage_const_4 ,_sage_const_1 ,_sage_const_2 ,_sage_const_5 ])
    alpha_2 = Permutation( [(_sage_const_1 ,_sage_const_2 ),(_sage_const_3 ,_sage_const_4 ,_sage_const_5 )])
    

    involution_fail = False

    try: 
        map_2 = PlanarMap(sigma_2,alpha_2)
    except ValueError as e:
        if str(e) == "The permutation alpha is not an involution" :
            involution_fail = True
    assert involution_fail is True

    #Test case 3
    #The case where alpha has a fixed point
    sigma_3 = Permutation( [_sage_const_3 ,_sage_const_4 ,_sage_const_1 ,_sage_const_2 ,_sage_const_5 ])
    alpha_3 = Permutation( [_sage_const_2 ,_sage_const_1 ,_sage_const_3 ,_sage_const_5 ,_sage_const_4 ])
    
    fixed_point_fail = False

    try: 
        map_3 = PlanarMap(sigma_3,alpha_3)
    except ValueError as e:
        if str(e) == "The permutation alpha should not have fixed points" :
            fixed_point_fail = True
    assert fixed_point_fail is True

    #Test case 4
    #Correspond to a linear tree with 4 nodes
    #The case where the graph isn't connected
    sigma_4 = Permutation( [_sage_const_1 ,_sage_const_2 ,_sage_const_3 ,_sage_const_5 ,_sage_const_4 ,_sage_const_6 ])
    alpha_4 = Permutation( [(_sage_const_1 ,_sage_const_2 ),(_sage_const_3 ,_sage_const_4 ),(_sage_const_5 ,_sage_const_6 )])
    
    connected_fail = False

    try: 
        map_4 = PlanarMap(sigma_4,alpha_4)
    except ValueError as e:
        if str(e) == "The graph isn't connected" :
            connected_fail = True
    assert connected_fail is True

    #Test case 5
    #The case where the graph is correctly defined
    sigma_5 = Permutation( [_sage_const_1 ,_sage_const_3 ,_sage_const_2 ,_sage_const_5 ,_sage_const_4 ,_sage_const_6 ])
    alpha_5 = Permutation( [(_sage_const_1 ,_sage_const_2 ),(_sage_const_3 ,_sage_const_4 ),(_sage_const_5 ,_sage_const_6 )])
    
    correct_graph = True

    try: 
        map_5 = PlanarMap(sigma_5,alpha_5)   
    except:
        correct_graph = False
    assert correct_graph is True


#Test the repr function of planar map
def test_repr_map():
    #Test case 1
    sigma_1 = Permutation( [_sage_const_1 ,_sage_const_3 ,_sage_const_2 ,_sage_const_5 ,_sage_const_4 ,_sage_const_6 ])
    alpha_1 = Permutation( [(_sage_const_1 ,_sage_const_2 ),(_sage_const_3 ,_sage_const_4 ),(_sage_const_5 ,_sage_const_6 )])
    map_1 = PlanarMap(sigma_1,alpha_1)
    correct_repr = "Sigma : [1, 3, 2, 5, 4, 6], Alpha : [2, 1, 4, 3, 6, 5]"
    assert str(map_1) == correct_repr

#Test the numberOfFaces function
def test_number_of_faces():
    #Test case 1
    #Correspond to a linear tree with 4 nodes
    sigma_1 = Permutation( [_sage_const_1 ,_sage_const_3 ,_sage_const_2 ,_sage_const_5 ,_sage_const_4 ,_sage_const_6 ])
    alpha_1 = Permutation( [(_sage_const_1 ,_sage_const_2 ),(_sage_const_3 ,_sage_const_4 ),(_sage_const_5 ,_sage_const_6 )])
    map_1 = PlanarMap(sigma_1,alpha_1)
    assert map_1.numberOfFaces()==_sage_const_1 

    #Test case 2
    #Correspond to a triangle
    sigma_2 = Permutation( [(_sage_const_1 ,_sage_const_6 ),(_sage_const_2 ,_sage_const_3 ),(_sage_const_4 ,_sage_const_5 )])
    alpha_2 = Permutation( [(_sage_const_1 ,_sage_const_2 ),(_sage_const_3 ,_sage_const_4 ),(_sage_const_5 ,_sage_const_6 )])
    map_2 = PlanarMap(sigma_2,alpha_2)
    assert map_2.numberOfFaces()==_sage_const_2 

#Test the numberOfNodes function
def test_number_of_nodes():
    #Test case 1
    #Correspond to a linear tree with 4 nodes
    sigma_1 = Permutation( [_sage_const_1 ,_sage_const_3 ,_sage_const_2 ,_sage_const_5 ,_sage_const_4 ,_sage_const_6 ])
    alpha_1 = Permutation( [(_sage_const_1 ,_sage_const_2 ),(_sage_const_3 ,_sage_const_4 ),(_sage_const_5 ,_sage_const_6 )])
    map_1 = PlanarMap(sigma_1,alpha_1)
    assert map_1.numberOfNodes()==_sage_const_4 

    #Test case 2
    #Correspond to a triangle
    sigma_2 = Permutation( [(_sage_const_1 ,_sage_const_6 ),(_sage_const_2 ,_sage_const_3 ),(_sage_const_4 ,_sage_const_5 )])
    alpha_2 = Permutation( [(_sage_const_1 ,_sage_const_2 ),(_sage_const_3 ,_sage_const_4 ),(_sage_const_5 ,_sage_const_6 )])
    map_2 = PlanarMap(sigma_2,alpha_2)
    assert map_2.numberOfNodes()==_sage_const_3 

#Test the numberOfEdges function
def test_number_of_edges():
    #Test case 1
    #Correspond to a linear tree with 4 nodes
    sigma_1 = Permutation( [_sage_const_1 ,_sage_const_3 ,_sage_const_2 ,_sage_const_5 ,_sage_const_4 ,_sage_const_6 ])
    alpha_1 = Permutation( [(_sage_const_1 ,_sage_const_2 ),(_sage_const_3 ,_sage_const_4 ),(_sage_const_5 ,_sage_const_6 )])
    map_1 = PlanarMap(sigma_1,alpha_1)
    assert map_1.numberOfEdges()==_sage_const_3 

    #Test case 2
    #Correspond to a triangle
    sigma_2 = Permutation( [(_sage_const_1 ,_sage_const_6 ),(_sage_const_2 ,_sage_const_3 ),(_sage_const_4 ,_sage_const_5 )])
    alpha_2 = Permutation( [(_sage_const_1 ,_sage_const_2 ),(_sage_const_3 ,_sage_const_4 ),(_sage_const_5 ,_sage_const_6 )])
    map_2 = PlanarMap(sigma_2,alpha_2)
    assert map_2.numberOfEdges()==_sage_const_3 

#Test the buildGraph function
def test_build_graph():

    #Test case 1
    #Correspond to a linear tree with 4 nodes
    sigma_1 = Permutation( [_sage_const_1 ,_sage_const_3 ,_sage_const_2 ,_sage_const_5 ,_sage_const_4 ,_sage_const_6 ])
    alpha_1 = Permutation( [(_sage_const_1 ,_sage_const_2 ),(_sage_const_3 ,_sage_const_4 ),(_sage_const_5 ,_sage_const_6 )])
    
    map_1 = PlanarMap(sigma_1,alpha_1)
    
    graph_1= map_1.buildGraph()
    edges_1 = graph_1.edges(labels = false)
    
    correctEdges_1  = [(_sage_const_1 ,_sage_const_2 ),(_sage_const_2 ,_sage_const_3 ),(_sage_const_3 ,_sage_const_4 )]

    passed_test_1 = True
    for k in range(map_1.numberOfEdges()):
        passed_test_1 &= edges_1[k]==correctEdges_1[k]

    assert passed_test_1 is True

    #Test case 2
    #Correspond to a triangle
    sigma_2 = Permutation( [(_sage_const_1 ,_sage_const_6 ),(_sage_const_2 ,_sage_const_3 ),(_sage_const_4 ,_sage_const_5 )])
    alpha_2 = Permutation( [(_sage_const_1 ,_sage_const_2 ),(_sage_const_3 ,_sage_const_4 ),(_sage_const_5 ,_sage_const_6 )])
    
    map_2 = PlanarMap(sigma_2,alpha_2)
    
    graph_2 = map_2.buildGraph()
    edges_2 = graph_2.edges(labels = false)

    correctEdges_2 = [(_sage_const_1 ,_sage_const_2 ),(_sage_const_1 ,_sage_const_3 ),(_sage_const_2 ,_sage_const_3 )]
    
    passed_test_2 = True

    for k in range(map_2.numberOfEdges()):
        passed_test_2 &= edges_2[k]==correctEdges_2[k]

    assert passed_test_2 is True


if __name__ == "__main__":
    #Test init function
    test_init_planar_map()
    print("test_init_planar_map passed")
    
    #Test repr function
    test_repr_map()
    print("test_repr_map passed")

    #Test the numberOfFaces function
    test_number_of_faces()
    print("test_number_of_faces passed")

    #Test the numberOfNodes function
    test_number_of_nodes()
    print("test_number_of_nodes passed")

    #Test the numberOfEdges function
    test_number_of_edges()
    print("test_number_of_edges passed")

    #Test the build graph function
    test_build_graph()
    print("test_build_graph passed")

